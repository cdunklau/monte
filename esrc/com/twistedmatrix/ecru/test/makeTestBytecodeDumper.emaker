def makeTestCase := <import:com.twistedmatrix.eunit.makeTestCase>;
def makeFakeModule := <import:com.twistedmatrix.ecru.test.makeFakeModule>
def dump := <import:com.twistedmatrix.ecru.bytecodeDumper>;

def assertEqual(left, right) {
  require(left == right, `$left != $right`)
}

def makeTestBytecodeDumper() {
  def testBytecodeDumper extends makeTestCase(testBytecodeDumper) {
    to test_empty() {
      def m := makeFakeModule([], [], [], [], [], [])
      def result := dump(m)
      assertEqual(result, [])
    }
    to test_integer() {
      def m := makeFakeModule([4097], [], [], [], [], [])
      def result := dump(m)
      assertEqual(result, [10, 5, 8, 0, 16, 130, 64])
    }
    to test_string() {
      def m := makeFakeModule(["wibble"], [], [], [], [], [])
      def result := dump(m)
      assertEqual(result,
                  [10, 10, 8, 1, 26, 6] + "wibble".getBytes())
    }
    to test_selector() {
      def m := makeFakeModule([], [["run", 1]], [], [], [], [])
      def result := dump(m)
      assertEqual(result, [18, 7, 10, 3] +
                           "run".getBytes() +
                          [16, 1])
    }
    to test_float() {
      def m := makeFakeModule([3.141592653589793], [],  [], [], [], [])
      def result := dump(m)
      assertEqual(result, [10, 23, 8, 2, 26, 19] +
                           "0x1.921fb54442d18p1".getBytes())
    }
    to test_bignum() {
      def m := makeFakeModule([143133631692849501673], [], [], [], [], [])
      def result := dump(m)
      assertEqual(result, [10, 13, 8, 3, 26, 9, 7, 194, 96, 207, 171,
                           143, 227, 85, 233])
    }
    to test_char() {
      def m := makeFakeModule(['x'], [], [], [], [], [])
      def result := dump(m)
      assertEqual(result, [10, 5, 8, 4, 16, 240, 1])
    }
    to test_code() {
      def script1 := [[["run", 1] => [[], [5, 0, 10, 0], 1],
                       ["doStuff", 2] => [[], [1], 0]],
                      [], 4]
      def script2 := [[["get", 1] => [[], [1, 5, 2], 0]],
                      [], 0]
      def m := makeFakeModule([],[],  [script1, script2], [],
                              [5, 0, 3, 10, 3],
                              ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])
      def result := dump(m)
      assertEqual(result,
                  [26, 37, 8, 4, 18, 15, 8, 1, 26, 5] + "run/1".getBytes() +
                  [34, 4, 5, 0, 10, 0, 18, 16, 8, 0, 26, 9] +
                  "doStuff/2".getBytes() +
                  [34, 1, 1, 26, 18, 8, 0, 18, 14, 8, 0, 26, 5] +
                  "get/1".getBytes() +
                  [34, 3, 1, 5, 2, 34, 16, 8, 9, 26, 5] +
                  "run/0".getBytes() + [34, 5, 5, 0, 3, 10, 3])
    }
    to test_handlertable() {
      def code := [20, 5, 5, 0, 21, 22, 3, 1, 5, 0]
      def m := makeFakeModule([], [], [], [[20, 0, 7, 2..4]],
                              code, [])
      def result := dump(m)
      assertEqual(result, [34, 33, 8, 0, 18, 10, 8, 20, 16, 0, 24, 7, 32,
                           2, 40, 4, 26, 5, 114, 117, 110, 47, 48, 34, 10,
                           20, 5, 5, 0, 21, 22, 3, 1, 5, 0])
    }
  }
  return testBytecodeDumper
}
