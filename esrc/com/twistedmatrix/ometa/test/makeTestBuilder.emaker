pragma.syntax("0.9")

def makeTestCase := <import:com.twistedmatrix.eunit.makeTestCase>
def makeBuilder := <import:com.twistedmatrix.ometa.makeBuilder>


def makeTestBuilder() {
    def self extends makeTestCase(self) {

        to test_makeGrammar() {
            def b := makeBuilder("foo")
            def wanted := e`def makeFoo(input) {
                              def foo extends makeRuntime(input, foo) {
                              }
                              return foo
                            }`
            self.assertEqual(b.makeGrammarSource([].asMap()), wanted)
        }
        to test_buildMethod() {
           def b := makeBuilder("foo")
           def wanted := e`def makeFoo(input) {
                              def foo extends makeRuntime(input, foo) {
                                  method action_baz() {
                                      1 + 1
                                  }
                              }
                              return foo
                            }`
            self.assertEqual(b.makeGrammarSource(["baz" => e`1 + 1`]), wanted)
        }
    }
    return self
}
