pragma.syntax("0.9")
def makeNoun := <elang:evm.makeSimpleNounExpr>
def makeFinalPattern := <elang:evm.makeFinalPattern>
def makeCallExpr := <elang:evm.makeCallExpr>
def makeNounExpr := <elang:evm.makeNounExpr>
def makeLiteralExpr := <elang:evm.makeLiteralExpr>
def ENode := <type:org.erights.e.elang.evm.ENode>

def buildList(args :List[ENode]) {
    return makeCallExpr(null, e`__makeList`, "run", args, null)
}

def makeBuilder(name) {
    def builder {
        to makeGrammarSource(rules) {
            def makerName := "make"+(name(0, 1).toUpperCase() + name(1))
            def methodTexts := [].diverge()
            for name => code in rules {
                methodTexts.push(`method rule_$name() {
                    ${code.asText()}$\n}$\n`)
            }
            return e__quasiParser.valueMaker(
                   `def $makerName(input) {
                        def $name extends makeRuntime(input, $name) {$\n` +
                        "\n".rjoin(methodTexts.snapshot()) +
                       `} $\n return $name $\n}`)
        }

        to apply(ruleName, args) {
            return e__quasiParser.valueMaker(
                `$name._apply("$ruleName", $${0})`
            ).substitute([buildList(args)])
        }
        to exactly(value) {
            def expr := makeLiteralExpr(null, value, null)
            def objname := makeNounExpr(null, name, null)
            return e`$objname._exactly($expr)`
        }
    }
    return builder
}
