pragma.syntax("0.9")
pragma.enable("accumulator")

def makeOMetaBase := <import:com.twistedmatrix.ometa.makeOMetaBase>
def makeLiteralExpr := <elang:evm.makeLiteralExpr>
def makeTextWriter := <elib:oldeio.makeTextWriter>

def makeString(bits) {
  def [tw, sb] := makeTextWriter.makeBufferingPair()
  for c in bits {
    tw.print(c)
  }
  return sb.snapshot()
}

def octdigits := "01234567"
def hexdigits := "0123456789abcdefABCDEF"

def makeOMetaE(input, builder) {

    def bootGrammarActions extends builder {
        to negative(x) {
            return -x
        }
        to makeHex(hs) {
            return __makeInt(makeString(hs), 16)
        }

        to makeOctal(ds) {
            return __makeInt(makeString(ds), 8)
        }

        to makeInt(ds) {
            return __makeInt(makeString(ds), 10)
        }

        to isOctDigit(x) {
            return octdigits.contains(x)
        }

        to isHexDigit(x) {
            return hexdigits.contains(x)
        }

        to makeString(c) {
            return makeString(c)
        }

        to makeString(c, cs) {
            return makeString([c] + cs)
        }
        to makeLiteral(s) {
            return makeLiteralExpr(null, s, null)
        }

        to applicationArgs(args) {
            return accum [] for a in args { _.with(e`$a`) }
        }

        to withError(val, err) {
            return val
        }

        to withDefaultError(val) {
            return e`[$val, null]`
        }

        to eq(val1, val2) {
            return val1 == val2
        }

        to cons(first, rest) {
            return [first] + rest
        }

        to or(e, es) {
            return bootGrammarActions.or([e] + es)
        }

        to makeMapFromPairs(pairs) {
            return __makeMap.fromPairs(pairs)
        }

        to newline() {
            return '\n'
        }

        match [=="makeList", args] {
            args
        }

    }


    def doAction(term, scope) {
      if ((def lit := term.getOptData()) != null) {
	return lit
      }
      def term`@nameTerm(@argTerms*)` := term
      def `@name` := nameTerm
      if (argTerms.size() == 0) {
	escape e {
	  def val := scope.fetch(name, fn { [e(), null] })[0]
	  return val
	}
      }
      def args := accum [] for a in argTerms { _.with(doAction(a, scope)) }
      return E.callWithPair(bootGrammarActions, [name, args])
    }


    def self extends makeOMetaBase(input, self) {
    to rule_number(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("spaces", [], ej))
        def _G_or_1(ej) {
            self.considerError(self.exactly('-', ej))
            _localScope with= ("x", self._apply("barenumber", [], ej))
            self.considerError(_localScope["x"])
            return self.considerError([doAction(term`negative(x)`, _localScope), null])
        }
        def _G_or_2(ej) {
            _localScope with= ("x", self._apply("barenumber", [], ej))
            self.considerError(_localScope["x"])
            return self.considerError([doAction(term`x`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_1, _G_or_2], ej))
    }


    to rule_barenumber(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_or_1(ej) {
            self.considerError(self.exactly('0', ej))
            def _G_or_1(ej) {
                def _G_or_1(ej) {
                    return self.considerError(self.exactly('x', ej))
                }
                def _G_or_2(ej) {
                    return self.considerError(self.exactly('X', ej))
                }
                self.considerError(self._or([_G_or_1, _G_or_2], ej))
                def _G_many_3(ej) {
                    return self._apply("hexdigit", [], ej)
                }
                _localScope with= ("hs", self._many(_G_many_3))
                self.considerError(_localScope["hs"])
                return self.considerError([doAction(term`makeHex(hs)`, _localScope), null])
            }
            def _G_or_2(ej) {
                def _G_many1_1(ej) {
                    return self._apply("octaldigit", [], ej)
                }
                _localScope with= ("ds", self._many1(_G_many1_1, ej))
                self.considerError(_localScope["ds"])
                return self.considerError([doAction(term`makeOctal(ds)`, _localScope), null])
            }
            return self.considerError(self._or([_G_or_1, _G_or_2], ej))
        }
        def _G_or_2(ej) {
            def _G_many1_1(ej) {
                return self._apply("digit", [], ej)
            }
            _localScope with= ("ds", self._many1(_G_many1_1, ej))
            self.considerError(_localScope["ds"])
            return self.considerError([doAction(term`makeInt(ds)`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_1, _G_or_2], ej))
    }


    to rule_octaldigit(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("x", self._apply("anything", [], ej))
        self.considerError(_localScope["x"])
        def _G_pred_1(ej) {
            return [doAction(term`isOctDigit(x)`, _localScope), null]
        }
        self.considerError(self.pred(_G_pred_1, ej))
        return self.considerError([doAction(term`x`, _localScope), null])
    }


    to rule_hexdigit(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("x", self._apply("anything", [], ej))
        self.considerError(_localScope["x"])
        def _G_pred_1(ej) {
            return [doAction(term`isHexDigit(x)`, _localScope), null]
        }
        self.considerError(self.pred(_G_pred_1, ej))
        return self.considerError([doAction(term`x`, _localScope), null])
    }


    to rule_escapedChar(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self.exactly('\\', ej))
        def _G_or_1(ej) {
            self.considerError(self.exactly('n', ej))
            return self.considerError([doAction(term`newline()`, _localScope), null])
        }
        def _G_or_2(ej) {
            self.considerError(self.exactly('r', ej))
            return self.considerError([doAction(term`'\r'`, _localScope), null])
        }
        def _G_or_3(ej) {
            self.considerError(self.exactly('t', ej))
            return self.considerError([doAction(term`'\t'`, _localScope), null])
        }
        def _G_or_4(ej) {
            self.considerError(self.exactly('b', ej))
            return self.considerError([doAction(term`'\b'`, _localScope), null])
        }
        def _G_or_5(ej) {
            self.considerError(self.exactly('f', ej))
            return self.considerError([doAction(term`'\f'`, _localScope), null])
        }
        def _G_or_6(ej) {
            self.considerError(self.exactly('"', ej))
            return self.considerError([doAction(term`'"'`, _localScope), null])
        }
        def _G_or_7(ej) {
            self.considerError(self.exactly("'", ej))
            return self.considerError([doAction(term`'\''`, _localScope), null])
        }
        def _G_or_8(ej) {
            self.considerError(self.exactly('\\', ej))
            return self.considerError([doAction(term`'\\'`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_1, _G_or_2, _G_or_3, _G_or_4, _G_or_5, _G_or_6, _G_or_7, _G_or_8], ej))
    }


    to rule_character(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("token", [doAction(term`"'"`, _localScope)], ej))
        def _G_or_1(ej) {
            return self.considerError(self._apply("escapedChar", [], ej))
        }
        def _G_or_2(ej) {
            return self.considerError(self._apply("anything", [], ej))
        }
        _localScope with= ("c", self._or([_G_or_1, _G_or_2], ej))
        self.considerError(_localScope["c"])
        self.considerError(self._apply("token", [doAction(term`"'"`, _localScope)], ej))
        return self.considerError([doAction(term`c`, _localScope), null])
    }


    to rule_bareString(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("token", [doAction(term`"\""`, _localScope)], ej))
        def _G_many_1(ej) {
            def _G_or_1(ej) {
                return self.considerError(self._apply("escapedChar", [], ej))
            }
            def _G_or_2(ej) {
                def _G_not_1(ej) {
                    return self.considerError(self.exactly('"', ej))
                }
                self.considerError(self.not(_G_not_1, ej))
                return self.considerError(self._apply("anything", [], ej))
            }
            return self._or([_G_or_1, _G_or_2], ej)
        }
        _localScope with= ("c", self._many(_G_many_1))
        self.considerError(_localScope["c"])
        self.considerError(self._apply("token", [doAction(term`"\""`, _localScope)], ej))
        return self.considerError([doAction(term`makeString(c)`, _localScope), null])
    }


    to rule_string(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("s", self._apply("bareString", [], ej))
        self.considerError(_localScope["s"])
        return self.considerError([doAction(term`apply("tokenBR", makeList(makeLiteral(s)))`, _localScope), null])
    }


    to rule_name(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("x", self._apply("letter", [], ej))
        self.considerError(_localScope["x"])
        def _G_many_1(ej) {
            return self._apply("letterOrDigit", [], ej)
        }
        _localScope with= ("xs", self._many(_G_many_1))
        self.considerError(_localScope["xs"])
        return self.considerError([doAction(term`makeString(x, xs)`, _localScope), null])
    }


    to rule_application(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("token", [doAction(term`"<"`, _localScope)], ej))
        self.considerError(self._apply("spaces", [], ej))
        _localScope with= ("name", self._apply("name", [], ej))
        self.considerError(_localScope["name"])
        def _G_or_1(ej) {
            _localScope with= ("args", self._apply("applicationArgs", [], ej))
            self.considerError(_localScope["args"])
            return self.considerError([doAction(term`apply(name, args)`, _localScope), null])
        }
        def _G_or_2(ej) {
            self.considerError(self._apply("token", [doAction(term`">"`, _localScope)], ej))
            return self.considerError([doAction(term`apply(name, makeList())`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_1, _G_or_2], ej))
    }


    to rule_applicationArgs(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_many1_1(ej) {
            self.considerError(self._apply("spaces", [], ej))
            return self.considerError(self._apply("action", [], ej))
        }
        _localScope with= ("args", self._many1(_G_many1_1, ej))
        self.considerError(_localScope["args"])
        self.considerError(self._apply("token", [doAction(term`">"`, _localScope)], ej))
        return self.considerError([doAction(term`applicationArgs(args)`, _localScope), null])
    }


    to rule_expr1(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_or_1(ej) {
            return self.considerError(self._apply("application", [], ej))
        }
        def _G_or_2(ej) {
            return self.considerError(self._apply("ruleValue", [], ej))
        }
        def _G_or_3(ej) {
            return self.considerError(self._apply("semanticPredicate", [], ej))
        }
        def _G_or_4(ej) {
            return self.considerError(self._apply("semanticAction", [], ej))
        }
        def _G_or_5(ej) {
            return self.considerError(self._apply("string", [], ej))
        }
        def _G_or_6(ej) {
            def _G_or_1(ej) {
                return self.considerError(self._apply("number", [], ej))
            }
            def _G_or_2(ej) {
                return self.considerError(self._apply("character", [], ej))
            }
            _localScope with= ("lit", self._or([_G_or_1, _G_or_2], ej))
            self.considerError(_localScope["lit"])
            return self.considerError([doAction(term`exactly(lit)`, _localScope), null])
        }
        def _G_or_7(ej) {
            self.considerError(self._apply("token", [doAction(term`"("`, _localScope)], ej))
            _localScope with= ("e", self._apply("expr", [], ej))
            self.considerError(_localScope["e"])
            self.considerError(self._apply("token", [doAction(term`")"`, _localScope)], ej))
            return self.considerError([doAction(term`e`, _localScope), null])
        }
        def _G_or_8(ej) {
            self.considerError(self._apply("token", [doAction(term`"["`, _localScope)], ej))
            _localScope with= ("e", self._apply("expr", [], ej))
            self.considerError(_localScope["e"])
            self.considerError(self._apply("token", [doAction(term`"]"`, _localScope)], ej))
            return self.considerError([doAction(term`listpattern(e)`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_1, _G_or_2, _G_or_3, _G_or_4, _G_or_5, _G_or_6, _G_or_7, _G_or_8], ej))
    }


    to rule_expr2(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_or_1(ej) {
            self.considerError(self._apply("token", [doAction(term`"~"`, _localScope)], ej))
            def _G_or_1(ej) {
                self.considerError(self._apply("token", [doAction(term`"~"`, _localScope)], ej))
                _localScope with= ("e", self._apply("expr2", [], ej))
                self.considerError(_localScope["e"])
                return self.considerError([doAction(term`lookahead(e)`, _localScope), null])
            }
            def _G_or_2(ej) {
                _localScope with= ("e", self._apply("expr2", [], ej))
                self.considerError(_localScope["e"])
                return self.considerError([doAction(term`not(e)`, _localScope), null])
            }
            return self.considerError(self._or([_G_or_1, _G_or_2], ej))
        }
        def _G_or_2(ej) {
            return self.considerError(self._apply("expr1", [], ej))
        }
        return self.considerError(self._or([_G_or_1, _G_or_2], ej))
    }


    to rule_expr3(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_or_1(ej) {
            _localScope with= ("e", self._apply("expr2", [], ej))
            self.considerError(_localScope["e"])
            def _G_or_1(ej) {
                self.considerError(self.exactly('*', ej))
                return self.considerError([doAction(term`many(e)`, _localScope), null])
            }
            def _G_or_2(ej) {
                self.considerError(self.exactly('+', ej))
                return self.considerError([doAction(term`many1(e)`, _localScope), null])
            }
            def _G_or_3(ej) {
                self.considerError(self.exactly('?', ej))
                return self.considerError([doAction(term`optional(e)`, _localScope), null])
            }
            def _G_or_4(ej) {
                return self.considerError([doAction(term`e`, _localScope), null])
            }
            _localScope with= ("r", self.considerError(self._or([_G_or_1, _G_or_2, _G_or_3, _G_or_4], ej)))
            self.considerError(_localScope["r"])
            def _G_or_5(ej) {
                self.considerError(self.exactly(':', ej))
                _localScope with= ("n", self._apply("name", [], ej))
                self.considerError(_localScope["n"])
                return self.considerError([doAction(term`bindValue(r, n)`, _localScope), null])
            }
            def _G_or_6(ej) {
                return self.considerError([doAction(term`r`, _localScope), null])
            }
            return self.considerError(self._or([_G_or_5, _G_or_6], ej))
        }
        def _G_or_2(ej) {
            self.considerError(self._apply("token", [doAction(term`":"`, _localScope)], ej))
            _localScope with= ("n", self._apply("name", [], ej))
            self.considerError(_localScope["n"])
            return self.considerError([doAction(term`bindValue(apply("anything", makeList()), n)`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_1, _G_or_2], ej))
    }


    to rule_expr4(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_many_1(ej) {
            return self._apply("expr3", [], ej)
        }
        _localScope with= ("es", self._many(_G_many_1))
        self.considerError(_localScope["es"])
        return self.considerError([doAction(term`sequence(es)`, _localScope), null])
    }


    to rule_expr(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("e", self._apply("expr4", [], ej))
        self.considerError(_localScope["e"])
        def _G_many_1(ej) {
            self.considerError(self._apply("token", [doAction(term`"|"`, _localScope)], ej))
            return self.considerError(self._apply("expr4", [], ej))
        }
        _localScope with= ("es", self._many(_G_many_1))
        self.considerError(_localScope["es"])
        return self.considerError([doAction(term`or(e, es)`, _localScope), null])
    }


    to rule_ruleValue(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("token", [doAction(term`"=>"`, _localScope)], ej))
        _localScope with= ("a", self._apply("action", [], ej))
        self.considerError(_localScope["a"])
        return self.considerError([doAction(term`compileAction(a)`, _localScope), null])
    }


    to rule_semanticPredicate(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("token", [doAction(term`"?("`, _localScope)], ej))
        _localScope with= ("a", self._apply("action", [], ej))
        self.considerError(_localScope["a"])
        self.considerError(self._apply("token", [doAction(term`")"`, _localScope)], ej))
        return self.considerError([doAction(term`pred(a)`, _localScope), null])
    }


    to rule_semanticAction(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("token", [doAction(term`"!("`, _localScope)], ej))
        _localScope with= ("a", self._apply("action", [], ej))
        self.considerError(_localScope["a"])
        self.considerError(self._apply("token", [doAction(term`")"`, _localScope)], ej))
        return [doAction(term`withDefaultError(a)`, _localScope), null]
    }


    to rule_rulePart(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("requiredName", self._apply("anything", [], ej))
        self.considerError(_localScope["requiredName"])
        self.considerError(self._apply("spaces", [], ej))
        _localScope with= ("n", self._apply("name", [], ej))
        self.considerError(_localScope["n"])
        def _G_pred_1(ej) {
            return [doAction(term`eq(n, requiredName)`, _localScope), null]
        }
        self.considerError(self.pred(_G_pred_1, ej))
        _localScope with= ("args", self._apply("expr4", [], ej))
        self.considerError(_localScope["args"])
        def _G_or_2(ej) {
            self.considerError(self._apply("token", [doAction(term`"::="`, _localScope)], ej))
            _localScope with= ("e", self._apply("expr", [], ej))
            self.considerError(_localScope["e"])
            return self.considerError([doAction(term`sequence(makeList(args, e))`, _localScope), null])
        }
        def _G_or_3(ej) {
            return self.considerError([doAction(term`args`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_2, _G_or_3], ej))
    }


    to rule_rule(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("spaces", [], ej))
        def _G_lookahead_1(ej) {
            _localScope with= ("n", self._apply("name", [], ej))
            return self.considerError(_localScope["n"])
        }
        self.considerError(self.lookahead(_G_lookahead_1, ej))
        _localScope with= ("r", self._apply("rulePart", [doAction(term`n`, _localScope)], ej))
        self.considerError(_localScope["r"])
        def _G_or_2(ej) {
            def _G_many1_1(ej) {
                return self._apply("rulePart", [doAction(term`n`, _localScope)], ej)
            }
            _localScope with= ("rs", self._many1(_G_many1_1, ej))
            self.considerError(_localScope["rs"])
            return self.considerError([doAction(term`makeList(n, or(r, rs))`, _localScope), null])
        }
        def _G_or_3(ej) {
            return self.considerError([doAction(term`makeList(n, r)`, _localScope), null])
        }
        return self.considerError(self._or([_G_or_2, _G_or_3], ej))
    }


    to rule_action(ej) {
        var _localScope := safeScope.with("self", self)
        self.considerError(self._apply("spaces", [], ej))
        def _G_or_1(ej) {
            return self.considerError(self._apply("actionCall", [], ej))
        }
        def _G_or_2(ej) {
            return self.considerError(self._apply("actionNoun", [], ej))
        }
        def _G_or_3(ej) {
            return self.considerError(self._apply("actionLiteral", [], ej))
        }
        return self.considerError(self._or([_G_or_1, _G_or_2, _G_or_3], ej))
    }


    to rule_actionCall(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("verb", self._apply("name", [], ej))
        self.considerError(_localScope["verb"])
        self.considerError(self._apply("token", [doAction(term`"("`, _localScope)], ej))
        def _G_optional_1(ej) {
            return self._apply("actionArgs", [], ej)
        }
        def _G_optional_2(ej) {
            return [null, self.getInput().error(null)]
        }
        _localScope with= ("args", self._or([_G_optional_1, _G_optional_2], ej))
        self.considerError(_localScope["args"])
        self.considerError(self._apply("token", [doAction(term`")"`, _localScope)], ej))
        return self.considerError([doAction(term`makeActionCall(verb, args)`, _localScope), null])
    }


    to rule_actionArgs(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("a", self._apply("action", [], ej))
        self.considerError(_localScope["a"])
        def _G_many_1(ej) {
            self.considerError(self._apply("token", [doAction(term`","`, _localScope)], ej))
            return self.considerError(self._apply("action", [], ej))
        }
        _localScope with= ("b", self._many(_G_many_1))
        self.considerError(_localScope["b"])
        return self.considerError([doAction(term`cons(a, b)`, _localScope), null])
    }


    to rule_actionNoun(ej) {
        var _localScope := safeScope.with("self", self)
        _localScope with= ("n", self._apply("name", [], ej))
        self.considerError(_localScope["n"])
        return self.considerError([doAction(term`makeActionNoun(n)`, _localScope), null])
    }


    to rule_actionLiteral(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_or_1(ej) {
            return self.considerError(self._apply("number", [], ej))
        }
        def _G_or_2(ej) {
            return self.considerError(self._apply("character", [], ej))
        }
        def _G_or_3(ej) {
            return self.considerError(self._apply("bareString", [], ej))
        }
        _localScope with= ("lit", self._or([_G_or_1, _G_or_2, _G_or_3], ej))
        self.considerError(_localScope["lit"])
        return self.considerError([doAction(term`makeActionLiteral(lit)`, _localScope), null])
    }


    to rule_grammar(ej) {
        var _localScope := safeScope.with("self", self)
        def _G_many_1(ej) {
            return self._apply("rule", [], ej)
        }
        _localScope with= ("rs", self._many(_G_many_1))
        self.considerError(_localScope["rs"])
        self.considerError(self._apply("spaces", [], ej))
        return self.considerError([doAction(term`makeGrammar(makeMapFromPairs(rs))`, _localScope), null])
    }
  }
    return self
}
