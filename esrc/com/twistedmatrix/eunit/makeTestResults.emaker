def makeTestResults(getProblemStackAndMessage) {
  var successes := 0
  var failures := 0
  def failureReasons := [].asMap().diverge()
  def testResults {
    to testSucceeded() {
      successes += 1
    }
    to testFailed(name, problem) {
      failureReasons[name] := problem
      failures += 1
    }
    to summary() {
      if (failures == 0) {
        return `PASSED (successes=$successes)`
      }
      if (successes == 0) {
        return `FAILED (failures=$failures)`
      }
      return `FAILED (failures=$failures, successes=$successes)`
    }
    to reportFailures() {
        def result := [].diverge()
        def nl := "\n"
        for name => problem in failureReasons {
            def [stack, message] := getProblemStackAndMessage(problem)
          result.push(("=" * 79) + `$nl[ERROR]: $name$nl$stack${nl}problem: $message`)
        }
      return result.snapshot()
    }
  }
  return testResults
}
