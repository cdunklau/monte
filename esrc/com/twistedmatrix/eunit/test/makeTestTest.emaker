pragma.syntax("0.9")
def makeTestCase := <import:com.twistedmatrix.eunit.makeTestCase>
def makeTestResults := <import:com.twistedmatrix.eunit.makeTestResults>
def makeTestSuite := <import:com.twistedmatrix.eunit.makeTestSuite>

def makeWasRun() {
    var log := []
    def wasRun extends makeTestCase(wasRun) {
        to setUp() {
            log with= ("setUp")
        }
        to tearDown() {
            log with= ("tearDown")
        }
        to test_method() {
            log with= ("testMethod")
        }
        to test_brokenMethod() {
            throw("broken")
        }
        to getLog() {
            return log
        }
    }
    return wasRun
}

def makeSetUpFailure() {
    def self extends makeTestCase(self) {
        to setUp() {
            throw("broken")
        }
        to test_method() {
        }
    }
    return self
}

def exampleFailureStart := "===============================================================================
[ERROR]: com.twistedmatrix.eunit.test.makeTestTest$makeWasRun$wasRun.test_brokenMethod"
#XXX Temporary hack for EoCL.
def exampleFailureStart2 := "===============================================================================
[ERROR]: com.twistedmatrix.eunit.test.makeTestTest$makeWasRun$wasRun__1.test_brokenMethod"

def exampleFailureEnd := "problem: a message"

def makeTestTest() {
    var results := null
    def testTest extends makeTestCase(testTest) {

        to setUp() {
            results := makeTestResults(fn p { ["a stack", "a message"]})
        }

        to test_templateMethod() {
            def test := makeWasRun()
            test.run("test_method", results)
            require(test.getLog() == ["setUp",  "testMethod", "tearDown"])
        }

        to test_result() {
            def test := makeWasRun()
            test.run("test_method", results)
            require("PASSED (successes=1)" == results.summary())
        }

        to test_failedResult() {
            def test := makeWasRun()
            test.run("test_brokenMethod", results)
            require("FAILED (failures=1)" == results.summary())
        }

        to test_failedResultFormatting() {
            results.testFailed("", null)
            require("FAILED (failures=1)" == results.summary())
        }

        to test_mixedResultFormatting() {
            results.testSucceeded()
            results.testFailed("", null)
            require("FAILED (failures=1, successes=1)" == results.summary())
        }

        to test_failedSetUp() {
            def test := makeSetUpFailure()
            test.run("test_method", results)
            require("FAILED (failures=1)" == results.summary())
        }

        to test_suite() {
            def suite := makeTestSuite()
            suite.add(makeWasRun(), "test_method")
            suite.add(makeWasRun(), "test_brokenMethod")
            suite.run(results)
            require("FAILED (failures=1, successes=1)" == results.summary())
        }

        to test_methodCollection() {
            def test := makeWasRun()
            def testNames := test.collectTestMethods()
            require(testNames.size() == 2)
            require(testNames.indexOf1("test_method") >= 0)
            require(testNames.indexOf1("test_brokenMethod") >= 0)
        }

        to test_failureReporting() {
            def test := makeWasRun()
            test.run("test_brokenMethod", results)
            def report := results.reportFailures()
            require(report.size() == 1, "more than one failure reported")
            require((report[0].startsWith(exampleFailureStart) ||
                     #XXX EoCL has different ideas about FQNs
                     report[0].startsWith(exampleFailureStart2)),
                    "failure report has wrong beginning")
            require(report[0].endsWith(exampleFailureEnd), report[0],
                   "failure report has wrong ending")
        }

        to test_assertEqualsSuccess() {
            testTest.assertEqual(1, 1)
        }
        to test_assertEqualsFailure() {
            var thrown := null
            try {
                testTest.assertEqual(1, 2)
            } catch p {
                thrown := p
            }
            if (thrown == null) {
                throw("No problem thrown by false assertion")
            }
        }
    }
    return testTest
}
