def makeTestCase(self) {
    def name
    def TestCase {
        to setName(newName) { bind name := newName }
        to setUp() {}
        to tearDown() {}

        to assertEqual(left, right) {
            require(left == right, `$left != $right`)
        }

        to assertEquals(left, right) {
            TestCase.assertEqual(left, right)
        }

        to assertEquiv(left, right) {
            require(left <=> right, `$left !<=> $right`)
        }

        to run(name, results) {
            TestCase.setName(name)
            return TestCase.run(results)
        }

        to run(results) {
            try {
                self.setUp()
                E.call(self, name, [])
                results.testSucceeded()
            } catch problem {
                results.testFailed(self.__getAllegedType().getFQName() +
                                   "." + name,
                                   problem)
            }
            self.tearDown()
            return results
        }
        /**
         Returns a list of methods whose names start with 'test_'.
        */
        to collectTestMethods() {
            def testMethods := [].diverge()
            for mdesc in self.__getAllegedType().getMessageTypes().getValues() {
                def name := mdesc.getVerb()
                if (name.startsWith("test_")) {
                    testMethods.push(name)
                }
            }
            return testMethods.snapshot()
        }
    }
    return TestCase
}
